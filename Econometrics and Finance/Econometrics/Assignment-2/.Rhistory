# Define the data
time_points <- 1:12
# Define the data
time_points <- 1:12
actual_values <- c(3, 7, -4, -6, 1, 9, -3, -7, 1, 9, -3, -7)
forecast_1_values <- c(2, 4, -3, -4, 0, 12, -6, -4, 4, 15, -1, -11)
forecast_2_values <- c(7, 9, -8, -10, 7, 9, -8, -10, 7, 9, -8, -10)
# Create a dataframe
data <- data.frame(
time_points,
actual_values,
forecast_1_values,
forecast_2_values
)
# Print the dataframe
print(data)
library(knitr)
# Calculate bias and MSE for forecast 1
forecast_1_bias <- mean(data$actual_values - data$forecast_1)
forecast_1_mse <- mean((data$actual_values - data$forecast_1)^2)
# Calculate bias and MSE for forecast 2
forecast_2_bias <- mean(data$actual_values - data$forecast_2)
forecast_2_mse <- mean((data$actual_values - data$forecast_2)^2)
# Print the results
print("Forecast 1:")
print("  Bias:", forecast_1_bias)
forecast_1_bias
install.packages("Metrics")
install.packages("dplyr")
# Calculate bias
bias_forecast1 <- mean(comparison_data$Actual - comparison_data$Forecast1)
# Importing the libraries
library(knitr)
library(Metrics)
library(dplyr)
# Define the data
time_points <- 1:12
actual_values <- c(3, 7, -4, -6, 1, 9, -3, -7, 1, 9, -3, -7)
forecast_1 <- c(2, 4, -3, -4, 0, 12, -6, -4, 4, 15, -1, -11)
forecast_2 <- c(7, 9, -8, -10, 7, 9, -8, -10, 7, 9, -8, -10)
# Create a dataframe
data <- data.frame(
time_points,
actual_values,
forecast_1,
forecast_2,row.names = NULL
)
# Print the dataframe
# Convert to kable table
kable(data, caption = "Data Table")
# Calculate bias and MSE for forecast 1
forecast_1_bias <- mean(data$actual_values - data$forecast_1)
forecast_1_mse <- mean((data$actual_values - data$forecast_1)^2)
# Calculate bias and MSE for forecast 2
forecast_2_bias <- mean(data$actual_values - data$forecast_2)
forecast_2_mse <- mean((data$actual_values - data$forecast_2)^2)
# Calculate bias and MSE for each forecast
comp <- data.frame(
Forecast = c("1", "2"),
Bias = c(forecast_1_bias, forecast_2_bias),
MSE = c(forecast_1_mse, forecast_2_mse)
)
# Convert to kable table
kable(comp, caption = "Bias and MSE for Forecast 1 and Forecast 2")
# Calculate error measures
error_measures <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(mae(actual_values, forecast_1),
mse(actual_values, forecast_1),
rmse(actual_values, forecast_1),
mape(actual_values, forecast_1),
smape(actual_values, forecast_1)),
Forecast2 = c(mae(actual_values, forecast_2),
mse(actual_values, forecast_2),
rmse(actual_values, forecast_2),
mape(actual_values, forecast_2),
smape(actual_values, forecast_2))
)
# Convert to kable table
kable(error_measures, caption = "Error Measures for Forecast 1 and Forecast 2")
# Define the last four observations
last_four_time_points <- tail(time_points, 4)
last_four_actual_values <- tail(actual_values, 4)
last_four_forecast_1_values <- tail(forecast_1, 4)
last_four_forecast_2_values <- tail(forecast_2, 4)
# Create a new data frame with forecast errors
last_four_errors_data <- data.frame(
time_points = last_four_time_points,
actual_values = last_four_actual_values,
forecast_1 = last_four_forecast_1_values,
forecast_2 = last_four_forecast_2_values,
row.names = NULL
)
# Print the data frame
# Convert to kable table
kable(last_four_errors_data, caption = "Data for Forecast 1 and Forecast 2 (Last Four Observations)")
# Calculate error measures for last four observations
error_measures_last_four <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(
mae(last_four_actual_values, last_four_forecast_1_values),
mse(last_four_actual_values, last_four_forecast_1_values),
rmse(last_four_actual_values, last_four_forecast_1_values),
mape(last_four_actual_values, last_four_forecast_1_values),
smape(last_four_actual_values, last_four_forecast_1_values)
),
Forecast2 = c(
mae(last_four_actual_values, last_four_forecast_2_values),
mse(last_four_actual_values, last_four_forecast_2_values),
rmse(last_four_actual_values, last_four_forecast_2_values),
mape(last_four_actual_values, last_four_forecast_2_values),
smape(last_four_actual_values, last_four_forecast_2_values)
)
)
# Print the error measures
kable(error_measures_last_four, caption = "Error Measures for Forecast 1 and Forecast 2 (Last Four Observations)")
# Define time points
time_points <- 1:12
# Fit linear trend model
lm_fit <- lm(actual_values ~ time_points)
# Forecast values
forecast_linear <- predict(lm_fit, newdata = data.frame(time_points = 1:12))
# Compare forecasts
comparison_data <- data.frame(
Time = 1:12,
Actual = actual_values,
Forecast1 = forecast_1,
Forecast2 = forecast_2,
ForecastLinear = forecast_linear
)
kable(comparison_data, caption = "Data with linear forecast")
# Calculate bias
bias_forecast1 <- mean(comparison_data$Actual - comparison_data$Forecast1)
bias_forecast2 <- mean(comparison_data$Actual - comparison_data$Forecast2)
bias_linear <- mean(comparison_data$Actual - comparison_data$ForecastLinear)
# Calculate variance
variance_forecast1 <- var(comparison_data$Error1)
# Importing the libraries
library(knitr)
library(Metrics)
library(dplyr)
# Define the data
time_points <- 1:12
actual_values <- c(3, 7, -4, -6, 1, 9, -3, -7, 1, 9, -3, -7)
forecast_1 <- c(2, 4, -3, -4, 0, 12, -6, -4, 4, 15, -1, -11)
forecast_2 <- c(7, 9, -8, -10, 7, 9, -8, -10, 7, 9, -8, -10)
# Create a dataframe
data <- data.frame(
time_points,
actual_values,
forecast_1,
forecast_2,row.names = NULL
)
# Print the dataframe
# Convert to kable table
kable(data, caption = "Data Table")
# Calculate bias and MSE for forecast 1
forecast_1_bias <- mean(data$actual_values - data$forecast_1)
forecast_1_mse <- mean((data$actual_values - data$forecast_1)^2)
# Calculate bias and MSE for forecast 2
forecast_2_bias <- mean(data$actual_values - data$forecast_2)
forecast_2_mse <- mean((data$actual_values - data$forecast_2)^2)
# Calculate bias and MSE for each forecast
comp <- data.frame(
Forecast = c("1", "2"),
Bias = c(forecast_1_bias, forecast_2_bias),
MSE = c(forecast_1_mse, forecast_2_mse)
)
# Convert to kable table
kable(comp, caption = "Bias and MSE for Forecast 1 and Forecast 2")
# Calculate error measures
error_measures <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(mae(actual_values, forecast_1),
mse(actual_values, forecast_1),
rmse(actual_values, forecast_1),
mape(actual_values, forecast_1),
smape(actual_values, forecast_1)),
Forecast2 = c(mae(actual_values, forecast_2),
mse(actual_values, forecast_2),
rmse(actual_values, forecast_2),
mape(actual_values, forecast_2),
smape(actual_values, forecast_2))
)
# Convert to kable table
kable(error_measures, caption = "Error Measures for Forecast 1 and Forecast 2")
# Define the last four observations
last_four_time_points <- tail(time_points, 4)
last_four_actual_values <- tail(actual_values, 4)
last_four_forecast_1_values <- tail(forecast_1, 4)
last_four_forecast_2_values <- tail(forecast_2, 4)
# Create a new data frame with forecast errors
last_four_errors_data <- data.frame(
time_points = last_four_time_points,
actual_values = last_four_actual_values,
forecast_1 = last_four_forecast_1_values,
forecast_2 = last_four_forecast_2_values,
row.names = NULL
)
# Print the data frame
# Convert to kable table
kable(last_four_errors_data, caption = "Data for Forecast 1 and Forecast 2 (Last Four Observations)")
# Calculate error measures for last four observations
error_measures_last_four <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(
mae(last_four_actual_values, last_four_forecast_1_values),
mse(last_four_actual_values, last_four_forecast_1_values),
rmse(last_four_actual_values, last_four_forecast_1_values),
mape(last_four_actual_values, last_four_forecast_1_values),
smape(last_four_actual_values, last_four_forecast_1_values)
),
Forecast2 = c(
mae(last_four_actual_values, last_four_forecast_2_values),
mse(last_four_actual_values, last_four_forecast_2_values),
rmse(last_four_actual_values, last_four_forecast_2_values),
mape(last_four_actual_values, last_four_forecast_2_values),
smape(last_four_actual_values, last_four_forecast_2_values)
)
)
# Print the error measures
kable(error_measures_last_four, caption = "Error Measures for Forecast 1 and Forecast 2 (Last Four Observations)")
# Define time points
time_points <- 1:12
# Fit linear trend model
lm_fit <- lm(actual_values ~ time_points)
# Forecast values
forecast_linear <- predict(lm_fit, newdata = data.frame(time_points = 1:12))
# Compare forecasts
comparison_data <- data.frame(
Time = 1:12,
Actual = actual_values,
Forecast1 = forecast_1,
Forecast2 = forecast_2,
ForecastLinear = forecast_linear
)
kable(comparison_data, caption = "Data with linear forecast")
# Calculate bias
bias_forecast1 <- mean(comparison_data$Actual - comparison_data$Forecast1)
bias_forecast2 <- mean(comparison_data$Actual - comparison_data$Forecast2)
bias_linear <- mean(comparison_data$Actual - comparison_data$ForecastLinear)
# Calculate variance
variance_forecast1 <- var(comparison_data$Actual - comparison_data$Forecast1)
variance_forecast2 <- var(comparison_data$Actual - comparison_data$Forecast2)
variance_linear <- var(comparison_data$Actual - comparison_data$ForecastLinear)
# Create data frame with bias and variance
error_measures <- data.frame(
Measure = c("Bias", "Variance"),
Forecast1 = c(bias_forecast1, variance_forecast1),
Forecast2 = c(bias_forecast2, variance_forecast2),
Linear = c(bias_linear, variance_linear)
)
# Print kable table
kable(error_measures, caption = "Bias and Variance of Forecast Methods")
simple_exponential_smoothing <- function(series, alpha) {
n <- length(series)
forecast_values <- numeric(n)
forecast_values[1] <- series[1]
for (i in 2:n) {
forecast_values[i] <- alpha * series[i - 1] + (1 - alpha) * forecast_values[i - 1]
}
return(forecast_values)
}
# Define data and smoothing parameters
data <- actual_values
alpha_values <- c(0.1, 0.3)
# Initialize empty lists for storing errors
mse_errors <- list()
# Loop through each smoothing parameter
for (alpha in alpha_values) {
# Initialize forecast and error variables
forecast <- c(data[1])
errors <- vector("numeric", length(data))
# Calculate forecasts for remaining data points
for (i in 2:length(data)) {
forecast[i] <- alpha * data[i-1] + (1 - alpha) * forecast[i-1]
errors[i] <- data[i] - forecast[i]
}
# Calculate mean squared error
mse_error <- mean(errors^2)
# Store MSE error
mse_errors[[paste0("alpha = ", alpha)]] <- mse_error
}
# Find the alpha with the minimum MSE
min_mse_index <- which.min(unlist(mse_errors))
optimal_alpha <- names(mse_errors)[min_mse_index]
# Print the results
print( optimal_alpha)
print( optimal_alpha,  mse_errors[[optimal_alpha]])
# Print the results
print( "optimal_aplha",optimal_alpha)
print(mse_errors[[optimal_alpha]])
install.packages("vars")
forecast
# Importing the libraries
library(knitr)
library(Metrics)
library(dplyr)
library(vars)
# Define the data
time_points <- 1:12
actual_values <- c(3, 7, -4, -6, 1, 9, -3, -7, 1, 9, -3, -7)
forecast_1 <- c(2, 4, -3, -4, 0, 12, -6, -4, 4, 15, -1, -11)
forecast_2 <- c(7, 9, -8, -10, 7, 9, -8, -10, 7, 9, -8, -10)
# Create a dataframe
data <- data.frame(
time_points,
actual_values,
forecast_1,
forecast_2,row.names = NULL
)
# Print the dataframe
# Convert to kable table
kable(data, caption = "Data Table")
# Calculate bias and MSE for forecast 1
forecast_1_bias <- mean(data$actual_values - data$forecast_1)
forecast_1_mse <- mean((data$actual_values - data$forecast_1)^2)
# Calculate bias and MSE for forecast 2
forecast_2_bias <- mean(data$actual_values - data$forecast_2)
forecast_2_mse <- mean((data$actual_values - data$forecast_2)^2)
# Calculate bias and MSE for each forecast
comp <- data.frame(
Forecast = c("1", "2"),
Bias = c(forecast_1_bias, forecast_2_bias),
MSE = c(forecast_1_mse, forecast_2_mse)
)
# Convert to kable table
kable(comp, caption = "Bias and MSE for Forecast 1 and Forecast 2")
# Calculate error measures
error_measures <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(mae(actual_values, forecast_1),
mse(actual_values, forecast_1),
rmse(actual_values, forecast_1),
mape(actual_values, forecast_1),
smape(actual_values, forecast_1)),
Forecast2 = c(mae(actual_values, forecast_2),
mse(actual_values, forecast_2),
rmse(actual_values, forecast_2),
mape(actual_values, forecast_2),
smape(actual_values, forecast_2))
)
# Convert to kable table
kable(error_measures, caption = "Error Measures for Forecast 1 and Forecast 2")
# Define the last four observations
last_four_time_points <- tail(time_points, 4)
last_four_actual_values <- tail(actual_values, 4)
last_four_forecast_1_values <- tail(forecast_1, 4)
last_four_forecast_2_values <- tail(forecast_2, 4)
# Create a new data frame with forecast errors
last_four_errors_data <- data.frame(
time_points = last_four_time_points,
actual_values = last_four_actual_values,
forecast_1 = last_four_forecast_1_values,
forecast_2 = last_four_forecast_2_values,
row.names = NULL
)
# Print the data frame
# Convert to kable table
kable(last_four_errors_data, caption = "Data for Forecast 1 and Forecast 2 (Last Four Observations)")
# Calculate error measures for last four observations
error_measures_last_four <- data.frame(
Measure = c("MAE", "MSE", "RMSE", "MAPE", "SMAPE"),
Forecast1 = c(
mae(last_four_actual_values, last_four_forecast_1_values),
mse(last_four_actual_values, last_four_forecast_1_values),
rmse(last_four_actual_values, last_four_forecast_1_values),
mape(last_four_actual_values, last_four_forecast_1_values),
smape(last_four_actual_values, last_four_forecast_1_values)
),
Forecast2 = c(
mae(last_four_actual_values, last_four_forecast_2_values),
mse(last_four_actual_values, last_four_forecast_2_values),
rmse(last_four_actual_values, last_four_forecast_2_values),
mape(last_four_actual_values, last_four_forecast_2_values),
smape(last_four_actual_values, last_four_forecast_2_values)
)
)
# Print the error measures
kable(error_measures_last_four, caption = "Error Measures for Forecast 1 and Forecast 2 (Last Four Observations)")
# Define time points
time_points <- 1:12
# Fit linear trend model
lm_fit <- lm(actual_values ~ time_points)
# Forecast values
forecast_linear <- predict(lm_fit, newdata = data.frame(time_points = 1:12))
# Compare forecasts
comparison_data <- data.frame(
Time = 1:12,
Actual = actual_values,
Forecast1 = forecast_1,
Forecast2 = forecast_2,
ForecastLinear = forecast_linear
)
kable(comparison_data, caption = "Data with linear forecast")
# Calculate bias
bias_forecast1 <- mean(comparison_data$Actual - comparison_data$Forecast1)
bias_forecast2 <- mean(comparison_data$Actual - comparison_data$Forecast2)
bias_linear <- mean(comparison_data$Actual - comparison_data$ForecastLinear)
# Calculate variance
variance_forecast1 <- var(comparison_data$Actual - comparison_data$Forecast1)
variance_forecast2 <- var(comparison_data$Actual - comparison_data$Forecast2)
variance_linear <- var(comparison_data$Actual - comparison_data$ForecastLinear)
# Create data frame with bias and variance
error_measures <- data.frame(
Measure = c("Bias", "Variance"),
Forecast1 = c(bias_forecast1, variance_forecast1),
Forecast2 = c(bias_forecast2, variance_forecast2),
Linear = c(bias_linear, variance_linear)
)
# Print kable table
kable(error_measures, caption = "Bias and Variance of Forecast Methods")
simple_exponential_smoothing <- function(series, alpha) {
n <- length(series)
forecast_values <- numeric(n)
forecast_values[1] <- series[1]
for (i in 2:n) {
forecast_values[i] <- alpha * series[i - 1] + (1 - alpha) * forecast_values[i - 1]
}
return(forecast_values)
}
# Define data and smoothing parameters
data <- actual_values
alpha_values <- c(0.1, 0.3)
# Initialize empty lists for storing errors
mse_errors <- list()
# Loop through each smoothing parameter
for (alpha in alpha_values) {
# Initialize forecast and error variables
forecast <- c(data[1])
errors <- vector("numeric", length(data))
# Calculate forecasts for remaining data points
for (i in 2:length(data)) {
forecast[i] <- alpha * data[i-1] + (1 - alpha) * forecast[i-1]
errors[i] <- data[i] - forecast[i]
}
# Calculate mean squared error
mse_error <- mean(errors^2)
# Store MSE error
mse_errors[[paste0("alpha = ", alpha)]] <- mse_error
}
# Find the alpha with the minimum MSE
min_mse_index <- which.min(unlist(mse_errors))
optimal_alpha <- names(mse_errors)[min_mse_index]
# Print the results
print(optimal_alpha)
print(mse_errors[[optimal_alpha]])
ts.plot(actual_values)
# Define the period
period <- 4
detrendised_values=actual_values-forecast_linear
# seasonality
seasonal_component <- function(series, d, t) {
s <- numeric(d)
for (i in 1:d) {
s[i] <- mean(series[seq(i,length(series),d)])
}
if (t%%d != 0) {
return(s[t%%d])
}
else return(s[d])
}
# Calculate S24
S24 <- seasonal_component(detrendised_values,4,24)
# Print S24
print(paste("S24:", S24))
# Fit AR(4) model
ar4_fit <- ar(actual_values, order = 4)
# Forecast values
forecast_ar4 <- forecast(ar4_fit, n = 12)
