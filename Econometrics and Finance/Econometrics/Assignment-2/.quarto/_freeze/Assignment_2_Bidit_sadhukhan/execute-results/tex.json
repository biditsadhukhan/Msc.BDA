{
  "hash": "c51b8f339e501233024d5880ab99d874",
  "result": {
    "markdown": "---\ntitle: \"Assignment-2\"\nauthor: \"Bidit Sadhukhan\"\nformat: pdf\ntoc-depth: 6\ntable-of-contents: true\n---\n\n\n# Info\n\n-   **Name:** *Bidit Sadhukhan*\n\n-   **Reg.No:** *B2230022*\n\n-   **University:** *RKMVERI*\n\n-   **Subject:** *Econometrics*\n\n## Question-01\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Importing the libraries\nlibrary(knitr)\nlibrary(Metrics)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(vars)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: MASS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'MASS'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: strucchange\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: zoo\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'zoo'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sandwich\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: urca\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lmtest\n```\n:::\n:::\n\n\n-   Making the Dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the data\ntime_points <- 1:12\nactual_values <- c(3, 7, -4, -6, 1, 9, -3, -7, 1, 9, -3, -7)\nforecast_1 <- c(2, 4, -3, -4, 0, 12, -6, -4, 4, 15, -1, -11)\nforecast_2 <- c(7, 9, -8, -10, 7, 9, -8, -10, 7, 9, -8, -10)\n\n# Create a dataframe\ndata <- data.frame(\n  time_points,\n  actual_values,\n  forecast_1,\n  forecast_2,row.names = NULL\n)\n\n# Print the dataframe\n# Convert to kable table\nkable(data, caption = \"Data Table\")\n```\n\n::: {.cell-output-display}\nTable: Data Table\n\n| time_points| actual_values| forecast_1| forecast_2|\n|-----------:|-------------:|----------:|----------:|\n|           1|             3|          2|          7|\n|           2|             7|          4|          9|\n|           3|            -4|         -3|         -8|\n|           4|            -6|         -4|        -10|\n|           5|             1|          0|          7|\n|           6|             9|         12|          9|\n|           7|            -3|         -6|         -8|\n|           8|            -7|         -4|        -10|\n|           9|             1|          4|          7|\n|          10|             9|         15|          9|\n|          11|            -3|         -1|         -8|\n|          12|            -7|        -11|        -10|\n:::\n:::\n\n\n## 1(a) Which forecasting method is better and why?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate bias and MSE for forecast 1\nforecast_1_bias <- mean(data$actual_values - data$forecast_1)\nforecast_1_mse <- mean((data$actual_values - data$forecast_1)^2)\n\n# Calculate bias and MSE for forecast 2\nforecast_2_bias <- mean(data$actual_values - data$forecast_2)\nforecast_2_mse <- mean((data$actual_values - data$forecast_2)^2)\n\n# Calculate bias and MSE for each forecast\ncomp <- data.frame(\n  Forecast = c(\"1\", \"2\"),\n  Bias = c(forecast_1_bias, forecast_2_bias),\n  MSE = c(forecast_1_mse, forecast_2_mse)\n)\n\n# Convert to kable table\nkable(comp, caption = \"Bias and MSE for Forecast 1 and Forecast 2\")\n```\n\n::: {.cell-output-display}\nTable: Bias and MSE for Forecast 1 and Forecast 2\n\n|Forecast |       Bias| MSE|\n|:--------|----------:|---:|\n|1        | -0.6666667|   9|\n|2        |  0.5000000|  16|\n:::\n:::\n\n\n**Bias:**\n\n-   **Forecast 1:** Bias is **negative**, indicating the forecast consistently underestimates the actual values.\n\n-   **Forecast 2:** Bias is **positive**, meaning the forecast overestimates the actual values.\n\nIn general, a **bias close to zero is desirable**. While a negative bias can be compensated for by adding a constant to the forecast, a positive bias might lead to inaccurate predictions and potential issues depending on the context.\n\n**MSE:**\n\n-   **Forecast 1:** MSE is **9**, indicating a lower average squared error.\n\n-   **Forecast 2:** MSE is **16**, showing a higher average squared error.\n\n**MSE measures the average squared difference between the actual and predicted values**, representing the average prediction error. Therefore, a **lower MSE indicates a better fit to the actual values**.\n\n**Decision:**\n\n-   Therefore, the best forecast depends on specific priorities:\n\n    -   **If minimizing bias is main concern:** Choose forecast 2.\n\n    -   **If minimizing MSE is main concern:** Choose forecast 1.\n\n## 1(b) Compute all the forecast errors for both the methods.\n\n-   **MAE:** Mean Absolute Error\n\n-   **MSE:** Mean Squared Error\n\n-   **RMSE:** Root Mean Squared Error\n\n-   **MAPE:** Mean Absolute Percentage Error\n\n-   **SMAPE:** Symmetric Mean Absolute Percentage Error\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate error measures\nerror_measures <- data.frame(\n  Measure = c(\"MAE\", \"MSE\", \"RMSE\", \"MAPE\", \"SMAPE\"),\n  Forecast1 = c(mae(actual_values, forecast_1),\n                   mse(actual_values, forecast_1),\n                   rmse(actual_values, forecast_1),\n                   mape(actual_values, forecast_1),\n                   smape(actual_values, forecast_1)),\n  Forecast2 = c(mae(actual_values, forecast_2),\n                   mse(actual_values, forecast_2),\n                   rmse(actual_values, forecast_2),\n                   mape(actual_values, forecast_2),\n                   smape(actual_values, forecast_2))\n)\n\n# Convert to kable table\nkable(error_measures, caption = \"Error Measures for Forecast 1 and Forecast 2\")\n```\n\n::: {.cell-output-display}\nTable: Error Measures for Forecast 1 and Forecast 2\n\n|Measure | Forecast1|  Forecast2|\n|:-------|---------:|----------:|\n|MAE     | 2.6666667|  3.5000000|\n|MSE     | 9.0000000| 16.0000000|\n|RMSE    | 3.0000000|  4.0000000|\n|MAPE    | 0.7509921|  1.6230159|\n|SMAPE   | 0.6894541|  0.6450609|\n:::\n:::\n\n\n## 1(c) Compute the forecast errors only using the last four observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the last four observations\nlast_four_time_points <- tail(time_points, 4)\nlast_four_actual_values <- tail(actual_values, 4)\nlast_four_forecast_1_values <- tail(forecast_1, 4)\nlast_four_forecast_2_values <- tail(forecast_2, 4)\n\n# Create a new data frame with forecast errors\nlast_four_errors_data <- data.frame(\n  time_points = last_four_time_points,\n  actual_values = last_four_actual_values,\n  forecast_1 = last_four_forecast_1_values,\n  forecast_2 = last_four_forecast_2_values,\n  row.names = NULL\n)\n\n# Print the data frame\n# Convert to kable table\nkable(last_four_errors_data, caption = \"Data for Forecast 1 and Forecast 2 (Last Four Observations)\")\n```\n\n::: {.cell-output-display}\nTable: Data for Forecast 1 and Forecast 2 (Last Four Observations)\n\n| time_points| actual_values| forecast_1| forecast_2|\n|-----------:|-------------:|----------:|----------:|\n|           9|             1|          4|          7|\n|          10|             9|         15|          9|\n|          11|            -3|         -1|         -8|\n|          12|            -7|        -11|        -10|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate error measures for last four observations\nerror_measures_last_four <- data.frame(\n  Measure = c(\"MAE\", \"MSE\", \"RMSE\", \"MAPE\", \"SMAPE\"),\n  Forecast1 = c(\n    mae(last_four_actual_values, last_four_forecast_1_values),\n    mse(last_four_actual_values, last_four_forecast_1_values),\n    rmse(last_four_actual_values, last_four_forecast_1_values),\n    mape(last_four_actual_values, last_four_forecast_1_values),\n    smape(last_four_actual_values, last_four_forecast_1_values)\n  ),\n  Forecast2 = c(\n    mae(last_four_actual_values, last_four_forecast_2_values),\n    mse(last_four_actual_values, last_four_forecast_2_values),\n    rmse(last_four_actual_values, last_four_forecast_2_values),\n    mape(last_four_actual_values, last_four_forecast_2_values),\n    smape(last_four_actual_values, last_four_forecast_2_values)\n  )\n)\n\n# Calculate bias and MSE\nbias_forecast1_last_four <- abs(mean(last_four_actual_values - last_four_forecast_1_values))\nmse_forecast1_last_four <- mean((last_four_actual_values - last_four_forecast_1_values)^2)\nbias_forecast2_last_four <- abs(mean(last_four_actual_values - last_four_forecast_2_values))\nmse_forecast2_last_four <- mean((last_four_actual_values - last_four_forecast_2_values)^2)\n\n# Add bias and MSE to error_measures_last_four data frame\nerror_measures_last_four <- rbind(\n  error_measures_last_four,\n  data.frame(\n    Measure = c(\"Bias\", \"MSE\"),\n    Forecast1 = c(bias_forecast1_last_four, mse_forecast1_last_four),\n    Forecast2 = c(bias_forecast2_last_four, mse_forecast2_last_four)\n  )\n)\n\n# Print the error measures\nkable(error_measures_last_four, caption = \"Error Measures for Forecast 1 and Forecast 2 (Last Four Observations)\")\n```\n\n::: {.cell-output-display}\nTable: Error Measures for Forecast 1 and Forecast 2 (Last Four Observations)\n\n|Measure |  Forecast1| Forecast2|\n|:-------|----------:|---------:|\n|MAE     |  3.7500000|  3.500000|\n|MSE     | 16.2500000| 17.500000|\n|RMSE    |  4.0311289|  4.183300|\n|MAPE    |  1.2261905|  2.023810|\n|SMAPE   |  0.7861111|  0.690508|\n|Bias    |  1.7500000|  0.500000|\n|MSE     | 16.2500000| 17.500000|\n:::\n:::\n\n\n## 1(d) Forecast the values for t = 1, 2, · · · , 12 using a linear trend model, and compare it with the previous two methods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define time points\ntime_points <- 1:12\n\n# Fit linear trend model\nlm_fit <- lm(actual_values ~ time_points)\n\n# Forecast values\nforecast_linear <- predict(lm_fit, newdata = data.frame(time_points = 1:12))\n\n# Compare forecasts\ncomparison_data <- data.frame(\n  Time = 1:12,\n  Actual = actual_values,\n  Forecast1 = forecast_1,\n  Forecast2 = forecast_2,\n  ForecastLinear = forecast_linear\n)\nkable(comparison_data, caption = \"Data with linear forecast\")\n```\n\n::: {.cell-output-display}\nTable: Data with linear forecast\n\n| Time| Actual| Forecast1| Forecast2| ForecastLinear|\n|----:|------:|---------:|---------:|--------------:|\n|    1|      3|         2|         7|      2.1153846|\n|    2|      7|         4|         9|      1.7307692|\n|    3|     -4|        -3|        -8|      1.3461538|\n|    4|     -6|        -4|       -10|      0.9615385|\n|    5|      1|         0|         7|      0.5769231|\n|    6|      9|        12|         9|      0.1923077|\n|    7|     -3|        -6|        -8|     -0.1923077|\n|    8|     -7|        -4|       -10|     -0.5769231|\n|    9|      1|         4|         7|     -0.9615385|\n|   10|      9|        15|         9|     -1.3461538|\n|   11|     -3|        -1|        -8|     -1.7307692|\n|   12|     -7|       -11|       -10|     -2.1153846|\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate bias\nbias_forecast1 <- mean(comparison_data$Actual - comparison_data$Forecast1)\nbias_forecast2 <- mean(comparison_data$Actual - comparison_data$Forecast2)\nbias_linear <- mean(comparison_data$Actual - comparison_data$ForecastLinear)\n\n# Calculate variance\nvariance_forecast1 <- var(comparison_data$Actual - comparison_data$Forecast1)\nvariance_forecast2 <- var(comparison_data$Actual - comparison_data$Forecast2)\nvariance_linear <- var(comparison_data$Actual - comparison_data$ForecastLinear)\n\n# Create data frame with bias and variance\nerror_measures <- data.frame(\n  Measure = c(\"Bias\", \"Variance\"),\n  Forecast1 = c(bias_forecast1, variance_forecast1),\n  Forecast2 = c(bias_forecast2, variance_forecast2),\n  Linear = c(bias_linear, variance_linear)\n)\n\n# Print kable table\nkable(error_measures, caption = \"Bias and Variance of Forecast Methods\")\n```\n\n::: {.cell-output-display}\nTable: Bias and Variance of Forecast Methods\n\n|Measure  |  Forecast1| Forecast2|   Linear|\n|:--------|----------:|---------:|--------:|\n|Bias     | -0.6666667|   0.50000|  0.00000|\n|Variance |  9.3333333|  17.18182| 33.53147|\n:::\n:::\n\n\nLinear trend model has higher MSE than other 2 forecasts but it has bias zero.\n\n## 1.(e) Suppose you want to use simple exponential smoothing for forecasting. What will be the optimal value of smoothing parameter α if α assumes only two values 0.1 or 0.3.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimple_exponential_smoothing <- function(series, alpha) {\nn <- length(series)\nforecast_values <- numeric(n)\nforecast_values[1] <- series[1]\nfor (i in 2:n) {\nforecast_values[i] <- alpha * series[i - 1] + (1 - alpha) * forecast_values[i - 1]\n}\nreturn(forecast_values)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define data and smoothing parameters\ndata <- actual_values\nalpha_values <- c(0.1, 0.3)\n\n# Initialize empty lists for storing errors\nmse_errors <- list()\n\n# Loop through each smoothing parameter\nfor (alpha in alpha_values) {\n  # Initialize forecast and error variables\n  forecast <- c(data[1])\n  errors <- vector(\"numeric\", length(data))\n\n  # Calculate forecasts for remaining data points\n  for (i in 2:length(data)) {\n    forecast[i] <- alpha * data[i-1] + (1 - alpha) * forecast[i-1]\n    errors[i] <- data[i] - forecast[i]\n  }\n\n  # Calculate mean squared error\n  mse_error <- mean(errors^2)\n  \n  # Store MSE error\n  mse_errors[[paste0(\"alpha = \", alpha)]] <- mse_error\n}\n\n# Find the alpha with the minimum MSE\nmin_mse_index <- which.min(unlist(mse_errors))\noptimal_alpha <- names(mse_errors)[min_mse_index]\n```\n:::\n\n\n-   The optimal Alpha value and the MSE value of the optimal alpha.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print the results\nprint(optimal_alpha)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"alpha = 0.1\"\n```\n:::\n\n```{.r .cell-code}\nprint(mse_errors[[optimal_alpha]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 38.71599\n```\n:::\n:::\n\n\n## 1(f) What will be the value of S24, where St denotes the seasonality of yt at t?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts.plot(actual_values)\n```\n\n::: {.cell-output-display}\n![](Assignment_2_Bidit_sadhukhan_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Define the period\nperiod <- 4\n\ndetrendised_values=actual_values-forecast_linear\n# seasonality\nseasonal_component <- function(series, d, t) {\ns <- numeric(d)\nfor (i in 1:d) {\ns[i] <- mean(series[seq(i,length(series),d)])\n}\nif (t%%d != 0) {\nreturn(s[t%%d])\n}\nelse return(s[d])\n}\n\n# Calculate S24\nS24 <- seasonal_component(detrendised_values,4,24)\n\n# Print S24\nprint(paste(\"S24:\", S24))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"S24: -6.08974358974359\"\n```\n:::\n:::\n\n\n## 1(g) Forecast the values t = 1, 2, · · · , 12 using an AR(4) model, and compare it with Method 1 and Method 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detrending and deseasonalizing\ndeseasonalised_detrendised_values <- detrendised_values - sapply(1:4, function(x) seasonal_component(detrendised_values, 4, x))\n\n# Fit AR(4) model\nar_4_model <- arima(deseasonalised_detrendised_values, order = c(4, 0, 0))\n\n# Print AR(4) model coefficients\nprint(ar_4_model$coef)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       ar1        ar2        ar3        ar4  intercept \n 1.0835933 -0.8155993  0.5530546 -0.3969140  0.1818662 \n```\n:::\n\n```{.r .cell-code}\n# Forecast AR(4) values\nestimated_ar_4_values <- numeric(12)\nestimated_ar_4_values[1:4] <- deseasonalised_detrendised_values[1:4]\n\nfor (i in 5:12) {\n  estimated_ar_4_values[i] <- sum(c(ar_4_model$coef) * c(rev(estimated_ar_4_values[seq(i - 4, i - 1, 1)]), 1))\n}\n\n# Add trend and seasonality to obtain final forecasts\nfinal_ar_4_values <- estimated_ar_4_values + forecast_linear + sapply(1:4, function(x) seasonal_component(detrendised_values, 4, x))\n\n# Print final AR(4) values\nprint(final_ar_4_values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        1         2         3         4         5         6         7         8 \n 3.000000  7.000000 -4.000000 -6.000000  1.195522  8.636005 -2.046133 -5.251398 \n        9        10        11        12 \n 1.148205  7.519468 -4.464859 -8.170914 \n```\n:::\n\n```{.r .cell-code}\n# Create a data frame with actual and forecast values\ncomparison_data <- data.frame(\n  Time = 1:12,\n  Actual = actual_values,\n  Forecast1 = forecast_1,\n  Forecast2 = forecast_2,\n  ForecastAR4 = final_ar_4_values\n)\n\n# Print kable table\nkable(comparison_data, caption = \"Actual vs. AR(4) Forecast Values\")\n```\n\n::: {.cell-output-display}\nTable: Actual vs. AR(4) Forecast Values\n\n| Time| Actual| Forecast1| Forecast2| ForecastAR4|\n|----:|------:|---------:|---------:|-----------:|\n|    1|      3|         2|         7|    3.000000|\n|    2|      7|         4|         9|    7.000000|\n|    3|     -4|        -3|        -8|   -4.000000|\n|    4|     -6|        -4|       -10|   -6.000000|\n|    5|      1|         0|         7|    1.195522|\n|    6|      9|        12|         9|    8.636005|\n|    7|     -3|        -6|        -8|   -2.046133|\n|    8|     -7|        -4|       -10|   -5.251398|\n|    9|      1|         4|         7|    1.148205|\n|   10|      9|        15|         9|    7.519468|\n|   11|     -3|        -1|        -8|   -4.464859|\n|   12|     -7|       -11|       -10|   -8.170914|\n:::\n\n```{.r .cell-code}\n# Calculate MSE\nmse <- mse(actual_values, final_ar_4_values)\nprint(paste0(\"MSE for AR(4) model:\", mse))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MSE for AR(4) model:0.822415095068545\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate bias\nbias_ar4 <- mean(comparison_data$Actual - comparison_data$ForecastAR4)\n\n# Calculate variance\nvariance_ar4 <- var(comparison_data$ForecastAR4 - comparison_data$Actual)\n\n# Create data frame with bias and variance\nerror_measures <- data.frame(\n  Measure = c(\"Bias\", \"Variance\"),\n  Forecast1 = c(forecast_1_bias, forecast_1_mse),\n  Forecast2 = c(forecast_2_bias, forecast_2_mse),\n  AR4 = c(bias_ar4, variance_ar4)\n)\n\n# Print kable table\nkable(error_measures, caption = \"Bias and Variance of Forecast Methods\")\n```\n\n::: {.cell-output-display}\nTable: Bias and Variance of Forecast Methods\n\n|Measure  |  Forecast1| Forecast2|       AR4|\n|:--------|----------:|---------:|---------:|\n|Bias     | -0.6666667|       0.5| 0.1195087|\n|Variance |  9.0000000|      16.0| 0.8815994|\n:::\n:::\n\n\n**AR(4) is giving lower MSE and bias than the other methods , so AR(4) is better.**\n",
    "supporting": [
      "Assignment_2_Bidit_sadhukhan_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}