library(ggplot2)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
# Plot the first canonical pair as a 2D scatterplot
canonical_pair <- data.frame(sales = cca_result$x[, 1], scores = cca_result$y[, 1])
ggplot(canonical_pair, aes(x = sales, y = scores)) +
geom_point() +
labs(x = "Sales Canonical Variate", y = "Test Scores Canonical Variate") +
theme_minimal()
# Load required libraries
library(MASS)
library(ggplot2)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
# Plot the first canonical pair as a 2D scatterplot
canonical_pair <- data.frame(sales = cca_result$xcoef[, 1], scores = cca_result$ycoef[, 1])
canonical_pair
# Load required libraries
library(MASS)
library(ggplot2)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
# Plot the first canonical pair as a 2D scatterplot
canonical_pair <- data.frame(sale = cca_result$xcoef[, 1], scores = cca_result$ycoef[, 1])
canonical_pair
# Load required libraries
library(MASS)
library(ggplot2)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
# Plot the first canonical pair as a 2D scatterplot
canonical_pair <- data.frame(sale = cca_result$xcoef[, 1], score = cca_result$ycoef[, 1])
canonical_pair
# Load the necessary libraries
library(stats)
library(ggplot2)
# Read the sales data
sales <- read.csv("sales.csv")
# Perform the canonical correlation analysis
cancor <- cancor(sales, varlist = c("growth", "profit", "new"))
# Load the necessary libraries
library(stats)
library(ggplot2)
# Read the sales data
sales <- read.csv("D:/Statistics/STAT 505/data/sales.csv", first_row = 2, col_names = c("growth", "profit", "new", "create", "mech", "abs", "math"))
# Load the necessary libraries
library(stats)
library(ggplot2)
# Read the sales data
sales <- read.csv("sales.csv", first_row = 2, col_names = c("growth", "profit", "new", "create", "mech", "abs", "math"))
sales
# Load the necessary libraries
library(stats)
library(ggplot2)
# Read the sales data
sales <- read.csv("sales.csv", col_names = c("growth", "profit", "new", "create", "mech", "abs", "math"))
# Load the necessary libraries
library(stats)
library(ggplot2)
# Read the sales data
sales <- read.csv("sales.csv")
# Perform the canonical correlation analysis
cancor <- cancor(sales, varlist = c("growth", "profit", "new"))
install.packages("GGally")
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars)
ggpairs(test_scores)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
sales$growth
sales$new
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars)
ggmatrix(sales_vars)
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars)
ggmatrix(sales_vars,nrow = 3)
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars)
ggmatrix(sales_vars,nrow = 3,ncol = 3)
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars)
ggpairs(test_scores)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars,diag = "densityDiag")
# Load required libraries
library(MASS)
library(ggplot2)
library(GGally)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
#Print the correlation
ggpairs(sales_vars,diag = list("densityDiag"))
ggpairs(test_scores,diag =list( "densityDiag"))
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
matcor(sales_vars,test_scores)
install.packages("CCA")
library(CCA)
matcor(sales_vars,test_scores)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(kable(cca_result$xcoef))
library(knitr)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(kable(cca_result$xcoef))
cat("\nCanonical Coefficients for Test Scores:\n")
print(kable(cca_result$ycoef))
#Print the correlation
ggpairs(sales,diag = list("densityDiag"))
library(knitr)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("\nCanonical Coefficients for Sales Variables:\n")
print(cca_result$xcoef)
cat("\nCanonical Coefficients for Test Scores:\n")
print(cca_result$ycoef)
install.packages(c("renv", "withr"))
install.packages(c("foreign", "KernSmooth", "Matrix", "mgcv", "nlme", "spatial", "survival"), lib="C:/Users/BIDIT/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/bd3f13aa")
# Load required libraries
library(MASS)
library(knitr)
library(ggplot2)
library(GGally)
library(CCA)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
m=matcor(sales_vars,test_scores)
kable(round(m$XYcor,2))
#Print the correlation
ggpairs(sales,upper = list("cor"))
install.packages('corrplot')
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
# Create the correlation plot
corrplot(correlation_matrix, method = "color", type = "upper",
order = "hclust", addrect = 2)
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
# Create the correlation plot
corrplot(
correlation_matrix,
method = "color",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n"           # Position of text labels ("n" for none)
)
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
variable_names <- colnames(correlation_matrix)
# Create the correlation plot
corrplot(
correlation_matrix,
method = "color",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n"
col.names = variable_names, # Names for columns
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
variable_names <- colnames(correlation_matrix)
# Create the correlation plot
corrplot(
correlation_matrix,
method = "color",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n" ,
col.names = variable_names, # Names for columns
row.names = variable_names # Position of text labels ("n" for none)
)
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
variable_names <- colnames(correlation_matrix)
# Create the correlation plot
corrplot(
correlation_matrix,
method = "circle",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n" ,
col.names = variable_names, # Names for columns
row.names = variable_names # Position of text labels ("n" for none)
)
correlation_matrix
,
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
variable_names <- colnames(correlation_matrix)
# Create the correlation plot
corrplot(
correlation_matrix,
method = "circle",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n" ,
tl.col = "black"
# Position of text labels ("n" for none)
)
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
correlation_matrix <- m$XYcor
variable_names <- colnames(correlation_matrix)
# Create the correlation plot
corrplot(
correlation_matrix,
method = "circle",
type = "upper",
order = "hclust",
addrect = 2,
addCoef.col = "black", # Color of the correlation coefficients
tl.cex = 0.7,          # Font size for text labels
tl.pos = "n" ,
tl.col = "black"
# Position of text labels ("n" for none)
)
corrplot::corrplot(correlation_matrix, p.mat=pvalue_matrix, sig.level=c(0.01, 0.05), method="circle", type="upper",
insig="label_sig", pch.cex=2, order="original", pch.col="white", tl.col="black",
tl.pos="td", tl.cex=2, cl.cex=2, diag=FALSE, mar=c(0,0,2,2))
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
ggcorr(data, method = c("everything", "pearson"))
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
ggcorr(data, method = c( "pearson"))
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
ggcorr(sales, method = c( "pearson"))
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
ggcorr(sales, method = c("everything", "pearson"))
# Load required libraries
library(MASS)
library(knitr)
library(ggplot2)
library(GGally)
library(CCA)
# Set the working directory and read the data
sales <- read.csv("sales.csv")
# Define the variables for each set
sales_vars <- sales[, c("growth", "profit", "new")]
test_scores <- sales[, c("create", "mech", "abs", "math")]
m=matcor(sales_vars,test_scores)
kable(round(m$XYcor,2))
#Print the correlation
library(corrplot)
# Assuming you have already computed the correlation matrix and rounded it
ggcorr(sales, method = c("everything", "pearson"))
library(knitr)
# Perform Canonical Correlation Analysis
cca_result <- cancor(sales_vars, test_scores)
# Print the canonical correlations
cat("Canonical Correlations:\n")
print(cca_result$cor)
# Print canonical coefficients for each set
cat("Canonical Coefficients for Sales Variables:\n")
x_coef=cca_result$xcoef
print(round(x_coef,3))
cat("Canonical Coefficients for Test Scores:\n")
y_coef=cca_result$ycoef[,-4]
print(round(y_coef,3))
U_1 <- sales[, c(0.009*"growth", 0.003*"profit", 0.011*"new")]
U_1 <- cca_result$xcoef[, 1]
U_1
U_1 <- cca_result$xcoef[, 1]
U_1
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
U_1 <- cca_result$xcoef[, 1]
U_1
dim(sales_vars)
dim(U_1)
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
U_1 <- data.frame(cca_result$xcoef[, 1])
U_1
dim(sales_vars)
dim(U_1)
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
x_load <- data.frame(cca_result$xcoef[, 1])
U_1 <- rowSums(x_load * sales_vars)
x_load <- cca_result$xcoef[, 1]
U_1 <- rowSums(x_load * sales_vars)
U_1
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
x_load <- cca_result$xcoef[, 1]
U_1 <- rowSums(x_load * sales_vars)
x_load
U_1
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
x_load <- cca_result$xcoef[, 1]
U_1 <- rowSums(x_load * sales_vars)
x_load
U_1
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
correlations_with_U1
x_load <- cca_result$xcoef[, 1]
U_1 <- rowSums(x_load * sales_vars)
x_load
U_1
sales_vars
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
correlations_with_U1
x_load <- cca_result$xcoef[, 1]
U_1 <- rowSums(x_load * sales_vars)
x_load
U_1
correlations_with_U1 <- sapply(1:ncol(sales_vars), function(i) cor(U_1, sales_vars[, i]))
correlations_with_U1
y_load <- cca_result$ycoef[, 1]
V_1 <- rowSums(y_load * test_scores)
y_load
V_1
correlations_with_V1 <- sapply(1:ncol(sales_vars), function(i) cor(V_1, test_scores[, i]))
correlations_with_v1
y_load <- cca_result$ycoef[, 1]
V_1 <- rowSums(y_load * test_scores)
y_load
V_1
correlations_with_V1 <- sapply(1:ncol(test_scores), function(i) cor(V_1, test_scores[, i]))
correlations_with_V1
correlations_with_U1 <- sapply(1:ncol(test_scores), function(i) cor(U_1, test_scores[, i]))
correlations_with_x_2_U1
correlations_with_x_2_U1 <- sapply(1:ncol(test_scores), function(i) cor(U_1, test_scores[, i]))
correlations_with_x_2_U1
correlations_with_x_2_U1 <- sapply(1:ncol(test_scores), function(i) cor(U_1, test_scores[, i]))
correlations_with_x_2_U1
correlations_with_x_1_V1 <- sapply(1:ncol(sales_vars), function(i) cor(V_1, sales_vars[, i]))
correlations_with_x_1_V1
