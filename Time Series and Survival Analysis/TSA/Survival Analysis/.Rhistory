#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
#########################################################################
# setwd("/SUDIPTA RKMV University/Time Series/CodeClass")
#########################################################################
# Simple Random Process
#########################################################################
# -----------------------------------------------------------------------
# Bernoulli iid
# -----------------------------------------------------------------------
b = (2*rbinom(500,1,0.5)-1)
par(mfrow=c(2,1))
plot.ts(b, main="binary process")                   # stationary
s = cumsum(b)
plot.ts(s, main="simple random walk")               # non-sationary
# -----------------------------------------------------------------------
# White Noise
# -----------------------------------------------------------------------
w = rnorm(500,0,1)
par(mfrow=c(2,1))
plot.ts(w, main="white noise")                      # stationary
# Random Walk
r = cumsum(w)
plot.ts(r, main="random walk")                      # non-stationary
#########################################################################
# Checking hypothesis of iid processes (randomness)
#########################################################################
# -----------------------------------------------------------------------
# White Noise
# -----------------------------------------------------------------------
t=seq(1:200);set.seed(12)
xt = rnorm(200,0,.5)                        # White noise
par(mfrow=c(3,1))
plot(t/10,xt, main="WhiteNoise")
# check ACF
acf(xt,lag.max = 40)
# all ACF together (sum of stzd normal i.e., chi-suare)
Box.test(xt, lag = 40, type = "Ljung-Box", fitdf = 0)
library(randtests)
# [y(i-1)<y(i)>y(i+1) or y(i-1)>y(i)<y(i+1)] testing of iid hypothesis
turning.point.test(xt)
# # [y(i)<y(i+1)] testing of no trend hypothesis
# difference.sign.test(xt)
# # [y(i)<y(j)] testing of no trend hypothesis
# rank.test(xt)
# qq plot testing for normality
qqnorm(xt)
# Shapiro Francia (checking of normality)
library(nortest)
sf.test(xt)
# Shapiro Wilk (checking of normality)
shapiro.test(xt)
# # checking of normality
# ks.test(xt, "pnorm")
#########################################################################
#########################################################################
# Checking hypothesis of iid processes (randomness)
#########################################################################
# -----------------------------------------------------------------------
# Signal plus Noise
# -----------------------------------------------------------------------
t=seq(1:200);set.seed(12)
xt = t/2+cos(t/10*pi/180)+rnorm(200,0,.5)                        # Mixing signal and noise
par(mfrow=c(3,1))
plot(t/10,xt, main="Signal plus Noise")
# check ACF
acf(xt,lag.max = 40)
# all ACF together (sum of stzd normal i.e., chi-suare)
Box.test(xt, lag = 40, type = "Ljung-Box", fitdf = 0)
library(randtests)
# [y(i-1)<y(i)>y(i+1) or y(i-1)>y(i)<y(i+1)] testing of iid ness
turning.point.test(xt)
# # [y(i)<y(i+1)] testing of iid ness
# difference.sign.test(xt)
# # [y(i)<y(j)] testing of iid nes
# rank.test(xt)
# qq plot
qqnorm(xt)
# Shapiro Francia (checking of normality)
sf.test(xt)
# Shapiro Wilk (checking of normality)
shapiro.test(xt)
# # checking of normality
# # checking of normality
# ks.test(xt, "pnorm")
# # checking of normality
# ks.test(xt, "pnorm")
#########################################################################
# # checking of normality
# ks.test(xt, "pnorm")
#########################################################################
# # checking of normality
# ks.test(xt, "pnorm")
#########################################################################
#########################################################################
# setwd("/SUDIPTA RKMV University/Time Series")
#########################################################################
# Simple Random Process
#########################################################################
# White Noise
# --------------------------------------
w = rnorm(500,0,1)
plot.ts(w, main="white noise")                      # stationary
# --------------------------------------
# MA(1) process
# --------------------------------------
theta=-0.8
ma1=array(0,500)
ma1[1]=w[1]
ma1=w[2:500]+theta*w[1:499]
plot.ts(ma1, main="First-order moving average")     # stationary
# --------------------------------------
# MA(2) process
# --------------------------------------
theta1=-0.8
theta2=.6
ma2=array(0,500)
ma2[1]=w[1]
ma2[2]=theta1*ma2[1]+w[2]
ma2=w[3:500]+theta1*w[2:499]+theta2*w[1:498]
plot.ts(ma2, main="Second-order moving average")     # stationary
# --------------------------------------
# AR(1) process
# --------------------------------------
phi=0.9
ar1=array(0,500)
ar1[1]=w[1]
for (i in 2:500)
ar1[i]=phi*ar1[i-1]+w[i]
plot.ts(ar1, main="First-order auto regression")    # stationary
# --------------------------------------
# AR(2) process
# --------------------------------------
phi1=.4
phi2=-.5
ar2=array(0,500)
ar2[1]=w[1]
ar2[2]=phi1*ar2[1]+w[2]
for (i in 3:500)
ar2[i]=phi1*ar2[i-1]+phi2*ar2[i-2]+w[i]
plot.ts(ar2, main="Second-order auto regression")    # stationary
# --------------------------------------
# ARMA(1,1) process
# --------------------------------------
theta=0.4
phi=-0.9
arma_1_1=array(0,500)
arma_1_1[1]=w[1]
for (i in 2:500)
arma_1_1[i]=phi*arma_1_1[i-1]+w[i]+theta*w[i-1]
plot.ts(arma_1_1, main="ARMA(1,1)")    # stationary
#########################################################################
# Autocorrelation Function
#########################################################################
# --------------------------------------
# ACF of white noise
# --------------------------------------
rho0=1
wnacf=acf(w, main="white noise acf")
# --------------------------------------
# ACF of MA(1)
# --------------------------------------
ma1acf=acf(ma1,ylim = c(-1,1), main="MA(1) acf")
rho1=theta/(1+theta^2)
rho1hat=ma1acf$acf[2]
w22hat=1+2*rho1hat^2
abline(a=1.96*sqrt(w22hat/length(ma1)),b=0,col='red',lty=2)
abline(a=-1.96*sqrt(w22hat/length(ma1)),b=0,col='red',lty=2)
w11hat=1-3*rho1hat^2+4*rho1hat^4
abline(a=rho1hat+1.96*sqrt(w11hat/length(ma1)),b=0,col='green',lty=2)
abline(a=rho1hat-1.96*sqrt(w11hat/length(ma1)),b=0,col='green',lty=2)
points(x=1,y=rho1,col='red')
# --------------------------------------
# ACF of MA(2)
# --------------------------------------
ma2acf=acf(ma2,ylim = c(-1,1), main="MA(2) acf")
# --------------------------------------
# ACF of AR(1)
# --------------------------------------
ar1acf=acf(ar1,ylim = c(-1,1), main="AR(1) acf")
phihat=ar1acf$acf[2]
lags=ar1acf$lag[-1]
what=array(0,length(lags))
w_ii=function(x,i)
return((1-x^(2*i))*(1+x^2)/(1-x^2)-2*i*x^(2*i))
what=w_ii(phihat,lags)
upperbounds=phihat^lags+1.96*sqrt(what/length(ar1))
lowerbounds=phihat^lags-1.96*sqrt(what/length(ar1))
lines(lags,upperbounds,col='red',lty=2)
lines(lags,lowerbounds,col='red',lty=2)
points(x=lags,y=phi^lags,col='magenta')
# --------------------------------------
# ACF of AR(2)
# --------------------------------------
ar2acf=acf(ar2,ylim = c(-1,1), main="AR(2) acf")
# --------------------------------------
# ACF of ARMA(1,1)
# --------------------------------------
arma_1_1acf=acf(arma_1_1,ylim = c(-1,1), main="ARMA(1,1) acf")
#########################################################################
# Fitting data with trend (Water level of lake Huron)
#########################################################################
LakeHuron
# --------------------------------------
plot.ts(LakeHuron-570,type="o",ylab="level in feet")
trFit <- lm(LakeHuron-570~time(LakeHuron))
summary(trFit)
abline(trFit,col="red")
plot(as.numeric(time(LakeHuron)),trFit$residuals,
type="o",xlab="Year",ylab="Residuals")
# --------------------------------------
# ACF of residuals of LakeHuron data
# --------------------------------------
yr=trFit$residuals
yracf=acf(yr,40,ylim = c(-0.8,1), main="Lake Huron residual acf")
phiH0=0.791
lags=yracf$lag[-1]
phihat=yracf$acf[2]
what=array(0,length(lags))
w_ii=function(x,i)
return( (1-x^(2*i))*(1+x^2)/(1-x^2) - 2*i*x^(2*i))
what=w_ii(phiH0,lags)
upperbounds=yracf$acf[-1]+1.96*sqrt(what/length(yr))
lowerbounds=yracf$acf[-1]-1.96*sqrt(what/length(yr))
lines(lags,upperbounds,col='red',lty=2)
lines(lags,lowerbounds,col='red',lty=2)
points(x=lags,y=phiH0^lags,col='magenta',pch=8)
#########################################################################
# Partial Autocorrelation Function
#########################################################################
# --------------------------------------
wnpacf=pacf(w, main="white noise pacf")               # PACF of white noise
ma1pacf=pacf(ma1,ylim = c(-1,1), main="MA(1) pacf")   # PACF of MA(1)
ma2pacf=pacf(ma2,ylim = c(-1,1), main="MA(2) pacf")   # PACF of MA(2)
ar1pacf=pacf(ar1,ylim = c(-1,1), main="AR(1) pacf")   # PACF of AR(1)
ar2pacf=pacf(ar2,ylim = c(-1,1), main="AR(2) pacf")   # PACF of AR(2)
arma_1_1pacf=pacf(arma_1_1,ylim = c(-1,1), main="ARMA(1,1) pacf") # PACF of ARMA(1,1)
#########################################################################
sppacf=pacf(sunspot.year[70:169])
#######################################################################
#setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting by arma() method
#######################################################################
# Autoregressive Process
# --------------------------------------
par(mfrow=c(2,1))
plot(arima.sim(list(order=c(1,0,0), ar=.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==+.9)))
plot(arima.sim(list(order=c(1,0,0), ar=-.9), n=100), ylab="x",
main=(expression(AR(1)~~~phi==-.9)))
# --------------------------------------
# Moving Average process
# --------------------------------------
par(mfrow = c(2,1))
plot(arima.sim(list(order=c(0,0,1), ma=.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==+.5)))
plot(arima.sim(list(order=c(0,0,1), ma=-.5), n=100), ylab="x",
main=(expression(MA(1)~~~theta==-.5)))
# --------------------------------------
# Autoregressive Moving Average process
# --------------------------------------
par(mfrow = c(2,1))
plot(arima.sim(list(order=c(1,0,1), ar=.9,ma=.5), n=100), ylab="x",
main=(expression(ARMA(1,1)~~~phi==.9~~~theta==.5)))
plot(arima.sim(list(order=c(2,0,2), ar=c(.9,-.1),ma=c(.4,-.5)), n=100), ylab="x",
main=(expression(ARMA(2,2))))
# --------------------------------------
# To calculate and display the ACF and PACF of the model
# --------------------------------------
ACF = ARMAacf(ar=c(1.5,-.75), ma=0, 24)
PACF = ARMAacf(ar=c(1.5,-.75), ma=0, 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
plot(PACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
ACF = ARMAacf(ar=0, ma=c(1.5,-.75), 24)
PACF = ARMAacf(ar=0, ma=c(1.5,-.75), 24, pacf=TRUE)
par(mfrow=c(1,2))
plot(ACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
plot(PACF, type="h", xlab="lag", ylim=c(-.8,1)); abline(h=0)
########################################
# Fitting of Dow Jones Utilities Index
# --------------------------------------
library(itsmr)
plot.ts(dowj,ylab='Utility Index',main='Dow Jones Utility Index')
dowj_d1 <- diff(dowj)
plot.ts(dowj_d1,ylab='Utility Index',main='Dow Jones Utility Index')
library(astsa)
acf2(dowj_d1)
# --------------------------------------
# Parameter Estimation Algorithms
# --------------------------------------
# dowj_d1.yw = yw(dowj_d1,p=1);print(dowj_d1.yw)            # Yule-Walker (AR)
# dowj_d1.bg = burg(dowj_d1,p=1);print(dowj_d1.bg)          # Burge (AR)
# dowj_d1.ia = ia(dowj_d1,q=2);print(dowj_d1.ia)            # Innovation (MA)
dowj_d1.ml = arma(dowj_d1,p=1,q=0);print(dowj_d1.ml)      # MLE (ARMA)
dowj_d1.at=autofit(dowj_d1,p=0:4,q=0:4);print(dowj_d1.at) # Autofit by mle
########################################
# Fitting of Lake Huron (Raw)
# --------------------------------------
plot.ts(LakeHuron)
acf2(LakeHuron)
# --------------------------------------
# Parameter Estimation Algorithms
# --------------------------------------
# huron.yw = yw(LakeHuron,p=2);print(huron.yw)            # Yule-Walker
# huron.bg = burg(LakeHuron,p=2);print(huron.bg)          # Burge
# huron.hn = hannan(LakeHuron,p=1,q=1);print(huron.hn)    # Hannan
huron.ml = arma(LakeHuron,p=1,q=1);print(huron.ml)      # mle
huron.at=autofit(LakeHuron,p=0:5,q=0:5);print(huron.at) # Autofit by mle
########################################
# Fitting data with trend
# --------------------------------------
plot.ts(LakeHuron-570,type="o",ylab="level in feet")
trFit <- lm(LakeHuron-570~time(LakeHuron))
summary(trFit)
abline(trFit,col="red")
plot(as.numeric(time(LakeHuron)),trFit$residuals,
type="o",xlab="Year",ylab="Residuals")
# --------------------------------------
# Fitting data after removing trend
# --------------------------------------
plot.ts(trFit$residuals)
acf2(trFit$residuals)
huron.res.at=autofit(trFit$residuals,p=0:5,q=0:5);print(huron.res.at) # Autofit by mle
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
#######################################################################
#setwd("/SUDIPTA RKMV University/Time Series")
#######################################################################
# Time Series:- Fitting and Forecasting by arima() method
#######################################################################
# Fitting of Lake Huron Data
# --------------------------------------
plot(LakeHuron, ylab="Height", xlab="Year", main="Lake Huron")
library(astsa)
acf2(LakeHuron,max.lag=48)                      # ACF & PACF values with graphic
library(itsmr)
huron.at = autofit(LakeHuron, p = 0:5, q = 0:5) # ARMA Model Selecton
# AR order selection
p=length(huron.at$phi)
if(p==1 && huron.at$phi[1]==0)
p=0
# MA order selection
q=length(huron.at$theta)
if(q==1 && huron.at$theta[1]==0)
q=0
huron.aim = arima(LakeHuron, order=c(p,0,q))
print(huron.aim);huron.at$aicc                  # ARIMA Model
########################################
# Forecasting of Lake Huron Data
# --------------------------------------
huron.aim.pr = predict(huron.aim, n.ahead=30)   # Forecasting data
ts.plot(LakeHuron,huron.aim.pr$pred, col=c('black','blue'),
xlim=c(1875,1972+30),ylab="Recruitment",main="Lake Huron")
lines(huron.aim.pr$pred+huron.aim.pr$se, lty="dashed", col='red')
lines(huron.aim.pr$pred-huron.aim.pr$se, lty="dashed", col='red')
#######################################################################
# Fitting of Dow Jones
# --------------------------------------
plot.ts(dowj, main="Dow Jones")
acf2(dowj)                                        # ACF & PACF values with graphic
djd1 <- diff(dowj)                                # first difference
plot.ts(djd1, main="Dow Jones First Difference")
acf2(djd1)                                        # ACF & PACF values with graphic
djd1.at = autofit(djd1, p = 0:4, q = 0:4)         # ARMA model selection
# AR order selection
p=length(djd1.at$phi)
if(p==1 && djd1.at$phi[1]==0)
p=0
# MA order selection
q=length(djd1.at$theta)
if(q==1 && djd1.at$theta[1]==0)
q=0
djd1.aim = arima(djd1, order=c(p,0,q))
print(djd1.aim);djd1.at$aicc                      # Resulting ARIMA Model
########################################
# Forecasting of Dow Jones Utility Index
# --------------------------------------
djd1.aim.pr = predict(djd1.aim, n.ahead=100)      # Forecasting differeance of data
ts.plot(ts(djd1),djd1.aim.pr$pred,
col=c('black','blue'),xlim=c(0,length(djd1)+100),
ylab="Index Value",main="Dow Jones Utility Index First Difference")
lines(djd1.aim.pr$pred+djd1.aim.pr$se, lty="dashed", col='red')
lines(djd1.aim.pr$pred-djd1.aim.pr$se, lty="dashed", col='red')
ts.plot(ts(dowj),
ts(dowj[length(dowj)]+cumsum(djd1.aim.pr$pred),start=length(dowj)),
col=c('black','blue'),xlim=c(0,length(dowj)+100),
ylab="Index Value",main="Dow Jones Utility Index")
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
# --------------------------------------
pwd
getwd()
# setwd("/SUDIPTA RKMV University/Time Series/CodeClass")
#########################################################################
#########################################################################
# Multiplicative Model
# -----------------------------------------------------------------------
# Red wine data
# -----------------------------------------------------------------------
library(itsmr)
winets=ts(wine,start=c(1980,1),end=c(1991,10),
frequency=12)         # transform to time series object
par(mfrow=c(1,2))
plot.ts(winets,type='o')        # data before transformation
plot.ts(log(winets),type='o')   # data after log transformation
#########################################################################
#########################################################################
# Esimating TREND by Finite Moving Average Filter
# -----------------------------------------------------------------------
# Trend (US strike data)
# -----------------------------------------------------------------------
strikests=ts(strikes/1000,start=c(1951),end=c(1980),
frequency=1)
par(mfrow=c(3,1))
plot.ts(strikests,type='o')
strikests_ext=c(rep(strikests[1],2),
strikests,rep(strikests[length(strikests)],2))  # padding both sides
strikests_ma=filter(strikests_ext, sides=2, rep(1/5,5))         # moving average
strikests_ma=(strikests_ma[-c(1,2,length(strikests_ma)-1,
length(strikests_ma))])           # discarding the pads
strikests_ma=ts(strikests_ma,start=c(1951),end=c(1980),
frequency=1)                                    # moving average time series
strikests_ext=c(rep(strikests[1],2),
strikests,rep(strikests[length(strikests)],2))  # padding both sides
strikests_ext
strikests
strikests_ma=ts(strikests_ma,start=c(1951),end=c(1980),
frequency=1)                                    # moving average time series
plot.ts(strikests,type='p');lines(strikests_ma,type='l')        # raw data with fitted moving average line
strikes_rs_ma=strikests-strikests_ma                            # residuals after moving average fit
plot.ts(strikes_rs_ma,type='o');abline(0,0)                     # plot of residuals
#########################################################################
# Esimating TREND by Exponential Smoothing
# -----------------------------------------------------------------------
# Trend (US strike data)
# -----------------------------------------------------------------------
par(mfrow=c(3,1))
plot.ts(strikests,type='o')
alpha=0.4
strikests_es=array(0,length(strikests))
strikests_es[1]=strikests[1]
for(i in 2:length(strikests))
{
strikests_es[i]=(1-alpha)*strikests_es[i-1]+alpha*strikests[i]
}
strikests_es=ts(strikests_es,start=c(1951),end=c(1980),
frequency=1)                                    # exponential smoothed time series
plot.ts(strikests,type='p');lines(strikests_es,type='l')        # raw data with fitted exponentially smoothed line
strikes_rs_es=strikests-strikests_es                            # residuals after exponentially smoothed fit
plot.ts(strikes_rs_es,type='o');abline(0,0)                     # plot of residuals
#########################################################################
# Esimating TREND by Regression to Find Residuals
# -----------------------------------------------------------------------
# Trend (Population in US)
# -----------------------------------------------------------------------
decade=seq(1790,1990,by=10)
myvector=c(3929214,5308483,7239881,9638453,12866020,17069453,
23191876,31443321,38558371,50189209,62979766,76212168,
92228496,106021537,123202624,132164569,151325798,179323175,
203302031,226545805,248709873)/1000000
myts <- ts(myvector, start=c(1790), end=c(1990), frequency=.1)
par(mfrow=c(2,1))
plot.ts(myts,type="p",ylab="Population in Millions")
time_scale=(decade-1780)/10
popln_data=cbind(decade,myvector,time_scale,time_scale^2)
colnames(popln_data)=c("Decade","Popln","time","sqtime")
popln_data=as.data.frame(popln_data)
trFit=lm(Popln~time+sqtime,data=popln_data)
summary(trFit)
lines(decade,predict(trFit),type="l",col="red")
plot(decade,trFit$residuals,xlab="Decade",ylab="Residuals");abline(h=0)
a_0=6.95938
t_a_0=6.953/1.99866
t_a_0
t_a=2(1-pt(t_a_0))
t_a=2(1-pt(t_a_0,df=1))
t_a=2*(1-pt(t_a_0))
t_a=2*(1-pt(t_a_0,df=1))
t_a
popln_data
t_a=2*(1-pt(t_a_0,df=20))
t_a=
t_a
t_a
t_a=2*(1-pt(t_a_0,df=20))
t_a
trFit=lm(Popln~time+sqtime,data=popln_data)
summary(trFit)
t_a
t_a=2*(1-pt(t_a_0,df=20))
t_a_0
t_a_0=3.482
t_a=2*(1-pt(t_a_0,df=20))
t_a
t_a=2*(1-pt(t_a_0,df=18))
t_a
